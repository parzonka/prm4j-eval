#!/usr/bin/env bash
#
# Compiles and runs JavaMOP aspects with the DaCapo-9.12-bach benchmark using aspectj load-time weaving.
#
# usage:         ./javamop
#
# list of all monitored properties can be found in target/jars/mop; each jar is a property
# list of all benchmarks can be found at http://dacapobench.org/benchmarks.html 

# remember directory where this script is called
# (some benchmarks need absolute paths)
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

echo "Resolving maven dependencies... (may take a while)"
mvn -q dependency:resolve --update-snapshots

# get and process classpath from maven pom
mvn -q dependency:build-classpath -Dmdep.outputFile=dependency-outputfile
tr ':' '\n' < dependency-outputfile > dependency-list

# get classpaths to local maven repo
AJC=$(grep "aspectjtools" dependency-list)
RT=$(grep "aspectjrt" dependency-list)
WEAVER=$(grep "aspectjweaver" dependency-list)
JAVAMOPRT=$(grep "javamoprt" dependency-list)
GUAVA=$(grep "guava" dependency-list)
APACHEMATH=$(grep "math3" dependency-list)
DACAPO=$(grep "dacapo" dependency-list)

# cleanup tempfiles
rm dependency-outputfile dependency-list

# create working and target directories
mkdir -p target/classes/META-INF target/jars/mop target/jars/prm4j

# compile the aspect into classes
echo "Compiling aspect..."
java -jar $AJC -cp ${RT}:${JAVAMOPRT}:$DACAPO:$GUAVA src/main/java/mop/* -d target/classes -6

# create jar with callback
javac src/main/java/prm4jeval/* -d target/classes -cp $DACAPO:$APACHEMATH:$GUAVA
jar cf target/jars/Callback.jar -C target/classes .

# load-time weaving via aspectjweaver, run for 16 iterations
for i in {0..15}; do
	for paramProperty in HasNext UnsafeIterator UnsafeMapIterator SafeSyncCollection SafeSyncMap ; do
		
		# create custom aop-ajc.xml and put in META-INF
		sed 's/<aspectname>/mop.'$paramProperty'MonitorAspect/g' src/main/resources/mop/aop-ajc.xml > target/classes/META-INF/aop-ajc.xml

		# repackage each aspect into a single jars with the custom aop-ajc.xml
		jar cf target/jars/mop/${paramProperty}.jar -C target/classes META-INF/aop-ajc.xml -C target/classes mop/${paramProperty}Monitor.class -C target/classes mop/${paramProperty}Monitor_Set.class -C target/classes mop/${paramProperty}MonitorAspect.class

		# cleanup custom aop-ajc.xml
		rm target/classes/META-INF/aop-ajc.xml
		
		for benchmark in avrora batik eclipse fop h2 jython luindex lusearch \
			pmd sunflow tomcat tradebeans tradesoap xalan ; do
		STATUS=0
			while [ $STATUS -eq 0 ]; do
    			echo "Starting benchmark [javamop:$benchmark:$paramProperty] measurement $i..."
				java -Xms256M -Xmx2048M -javaagent:${WEAVER} -Xbootclasspath/a:$RT \
					-Dprm4jeval.outputfile=results/javamop.ser \
					-Dprm4jeval.benchmark=$benchmark -Dprm4jeval.parametricProperty=$paramProperty \
					-cp $DACAPO:$GUAVA:$JAVAMOPRT:$APACHEMATH:${DIR}/target/jars/mop/$paramProperty.jar:${DIR}/target/jars/Callback.jar \
					Harness --no-validation -c prm4jeval.EvalCallback $benchmark
				STATUS=$?
			done
		done
	done
done
